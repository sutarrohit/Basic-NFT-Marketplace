{
  "language": "Solidity",
  "sources": {
    "contracts/NftMarketPlace.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//`listItem`: List NFT on the marketplace\r\n//`buyItem` : Buy NFT on the marketplace\r\n//`cancelIteam` : cancle listing of NFT\r\n//`updatelisting` : update listing data of the NFT\r\n//`withdrawprocessed` : withdraw mony from marketplace\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n//error functions\r\nerror NftMarketPlace_PriceMustBeAboveZero();\r\nerror NftMarketPlace_NotApprovedForMarketPlace();\r\nerror NftMarketPlace_AlreadyListed(address nftContractAddress, uint256 tokenId);\r\nerror NftMarketPlace_NotOwner();\r\nerror NftMarketPlace_NftNotListed(address nftContractAddress, uint256 tokenId);\r\nerror NftMarketPlace_PriceNotMet(address nftContractAddress, uint256 tokenId, uint256 price);\r\nerror NftMarketPlace_NoProceed();\r\nerror NftMarketPlace_TransactionFailed();\r\n\r\ncontract NftMarketPlace is ReentrancyGuard {\r\n    /**Structs*/\r\n    struct Listing {\r\n        uint256 price;\r\n        address seller;\r\n    }\r\n\r\n    /**Mappings*/\r\n    /**NFT contract mapping => tokenID => Listing struct*/\r\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\r\n    //Mapping bet seller's address and Amount earned\r\n    mapping(address => uint256) private s_proceeds;\r\n\r\n    //**Events */\r\n    event itemListed(\r\n        address indexed seller,\r\n        address indexed nftContractAddress,\r\n        uint256 indexed tokensId,\r\n        uint256 price\r\n    );\r\n\r\n    event ItemBought(\r\n        address indexed buyer,\r\n        address indexed nftContract,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    );\r\n\r\n    event ItemCanceled(address indexed seller, address indexed NftContractAddress, uint256 tokenId);\r\n\r\n    //**Modifiers*/\r\n\r\n    //**Checking if NFT is already listed or not  */\r\n    modifier notListed(\r\n        address nftContractAddress,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) {\r\n        Listing memory listing = s_listings[nftContractAddress][tokenId];\r\n        if (listing.price > 0) {\r\n            revert NftMarketPlace_AlreadyListed(nftContractAddress, tokenId);\r\n        }\r\n        _;\r\n    }\r\n\r\n    //**Checking the Owner of the NFT is msg.sender or not */\r\n    modifier isOwner(\r\n        address nftContractAddress,\r\n        uint256 tokenId,\r\n        address spender\r\n    ) {\r\n        IERC721 nft = IERC721(nftContractAddress);\r\n        address owner = nft.ownerOf(tokenId);\r\n        if (spender != owner) {\r\n            revert NftMarketPlace_NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    //**Checking if the NFT is listed or not */\r\n    modifier isListed(address nftContractAddress, uint256 tokenId) {\r\n        Listing memory listing = s_listings[nftContractAddress][tokenId];\r\n\r\n        if (listing.price <= 0) {\r\n            revert NftMarketPlace_NftNotListed(nftContractAddress, tokenId);\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    ////////Main Functions////////\r\n\r\n    /**\r\n     * @dev listNft() is used to list NFTs on the markeplace\r\n     * @param nftContractAddress address of the NFT contract\r\n     * @param tokenId token number of the NFT\r\n     * @param price set price of the NFT\r\n     * @notice The list NFT function is gonna list NFT on the MarketPlace, user still hold NFT and give the marketplace approval to sell the NFT for them\r\n     */\r\n    function listNft(\r\n        address nftContractAddress,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    )\r\n        external\r\n        notListed(nftContractAddress, tokenId, msg.sender)\r\n        isOwner(nftContractAddress, tokenId, msg.sender)\r\n    {\r\n        if (price <= 0) {\r\n            revert NftMarketPlace_PriceMustBeAboveZero();\r\n        }\r\n\r\n        //Checking if contract approve to marketplace\r\n        IERC721 nft = IERC721(nftContractAddress);\r\n        if (nft.getApproved(tokenId) != address(this)) {\r\n            revert NftMarketPlace_NotApprovedForMarketPlace();\r\n        }\r\n\r\n        //mapping listing NFT details\r\n        s_listings[nftContractAddress][tokenId] = Listing(price, msg.sender);\r\n        emit itemListed(msg.sender, nftContractAddress, tokenId, price);\r\n    }\r\n\r\n    /**\r\n     * @dev This function is used to buy NFTs\r\n     * @param nftContractAddress address of the NFT contract\r\n     * @param tokenId token number of the NFT\r\n     * @notice When buyer buy NFT with paying correct amount this function safe transfer that NFT and add Amount to the seller's address\r\n     */\r\n    function buyItem(address nftContractAddress, uint256 tokenId)\r\n        external\r\n        payable\r\n        isListed(nftContractAddress, tokenId)\r\n    {\r\n        Listing memory listedItem = s_listings[nftContractAddress][tokenId];\r\n\r\n        //Revert transation when correct amount is not send\r\n        if (msg.value < listedItem.price) {\r\n            revert NftMarketPlace_PriceNotMet(nftContractAddress, tokenId, listedItem.price);\r\n        }\r\n\r\n        //mapping seller => amount\r\n        s_proceeds[listedItem.seller] = s_proceeds[listedItem.seller] + msg.value;\r\n        //Delete listing after selling NFT\r\n        delete (s_listings[nftContractAddress][tokenId]);\r\n\r\n        //Transfer toke to buyer\r\n        IERC721(nftContractAddress).safeTransferFrom(listedItem.seller, msg.sender, tokenId);\r\n\r\n        //make sure NFT was transferred\r\n        emit ItemBought(msg.sender, nftContractAddress, tokenId, listedItem.price);\r\n    }\r\n\r\n    /**This function cancle NFT listing  */\r\n\r\n    function cancleListing(address nftContractAddress, uint256 tokenId)\r\n        external\r\n        isOwner(nftContractAddress, tokenId, msg.sender)\r\n        isListed(nftContractAddress, tokenId)\r\n    {\r\n        delete (s_listings[nftContractAddress][tokenId]);\r\n        emit ItemCanceled(msg.sender, nftContractAddress, tokenId);\r\n    }\r\n\r\n    /**This function update listed NFT price */\r\n    function updateListing(\r\n        address nftContractAddress,\r\n        uint256 tokenId,\r\n        uint256 newPrice\r\n    )\r\n        external\r\n        isOwner(nftContractAddress, tokenId, msg.sender)\r\n        isListed(nftContractAddress, tokenId)\r\n    {\r\n        s_listings[nftContractAddress][tokenId].price = newPrice;\r\n        emit itemListed(msg.sender, nftContractAddress, tokenId, newPrice);\r\n    }\r\n\r\n    /**This function withdraw Amount to seller's address */\r\n    function withdrawProceeds() external nonReentrant {\r\n        uint256 proceeds = s_proceeds[msg.sender];\r\n\r\n        if (proceeds <= 0) {\r\n            revert NftMarketPlace_NoProceed();\r\n        }\r\n\r\n        s_proceeds[msg.sender] = 0;\r\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\"\");\r\n        if (!success) {\r\n            revert NftMarketPlace_TransactionFailed();\r\n        }\r\n    }\r\n\r\n    ////////Getter Functions////////\r\n\r\n    function getListing(address NftContractAddress, uint256 tokenId)\r\n        external\r\n        view\r\n        returns (Listing memory)\r\n    {\r\n        return s_listings[NftContractAddress][tokenId];\r\n    }\r\n\r\n    function getProceeds(address seller) external view returns (uint256) {\r\n        return s_proceeds[seller];\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}